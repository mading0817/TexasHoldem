下面给出 **50 条原子级 PLAN**（连续编号 #1 – #50），覆盖 **v2 目录重构 → CLI 适配 → Streamlit 简易可视化 MVP** 的全过程。
每条 PLAN 都按 **①问题 → ②解决方案 → ③测试构建** 三段展开，并内嵌所有您提出的内控规则（Google Docstring、pdoc 更新、反作弊测试、10 手日志回归等）。

---

### **阶段 A v2 目录骨架与基础设施（PLAN #1 – #6）**

| #     | ① 问题                 | ② 解决方案                                                                                         | ③ 对应测试                                                                         |
| ----- | -------------------- | ---------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |
| **1** | 目前源代码与将来重构混杂，易互相污染   | `project_root/v2/` 新建空包；`__init__.py` 只导出版本号                                                   | 无需代码测试；**git diff** 确保 v2 与旧代码完全隔离                                             |
| **2** | 各旧模块导入路径将失效          | 在 v2 建立与重构目标一致的空包层级 `core/`, `controller/`, `ui/cli/`, `ui/streamlit/`，并放置 **导向性 `README.md`** | `python -m pytest -q tests/_scaffolding/test_imports.py` → 断言所有顶层包可成功 `import` |
| **3** | Google-Docstring 未统一 | 将 `docs/conf.py` 增加 **pdoc-cfg**：`docformat="google"`；新增 `pre-commit` 钩子运行 `flake8-docstrings` | 新建 `tests/lint/test_docstring.py` 调用 `pydocstyle`，对 v2 必须为 0 error             |
| **4** | 抽象枚举、常量分散            | 创建 `v2/core/enums.py`，集中定义 **ActionType、Phase、Rank 等**                                         | 单元测试：验证每个枚举具备所需成员 (`assert Phase.FLOP.value == "FLOP"`)                        |
| **5** | 基础扑克牌对象散布多文件         | 拆出 `v2/core/cards.py`（Card, Deck）并保持纯数据对象                                                      | 单元：随机洗牌后计 52 张、无重复花色点数                                                         |
| **6** | 文档与任务跟踪缺位            | 初始化 `/docs/v2/README.md`、生成 `@TASK_GUIDE.txt` 空表格（状态/负责人/备注列）                                  | 无代码测试；CI 检查 **TASK\_GUIDE** 存在且 YAML-lint 通过                                   |

---

### **阶段 B 核心逻辑层重塑（PLAN #7 – #18）**

| #      | ① 问题                  | ② 解决方案                                                                                 | ③ 测试                                                |
| ------ | --------------------- | -------------------------------------------------------------------------------------- | --------------------------------------------------- |
| **7**  | 牌型评估器算法与表结构交织         | 迁入 `v2/core/evaluator.py`，保留现算法并加 `@dataclass HandResult`                              | 用旧 `tests/evaluator` 数据集跑 1e4 组随机 7 张牌，对比 v1 结果一致   |
| **8**  | 玩家状态逻辑与 UI 混合         | 新建 `v2/core/player.py` 包含 `Player`, `SeatStatus`；不含任何打印                                | 单元：下注扣筹、全下自动状态变为 `ALL_IN`                           |
| **9**  | 行动合法性散布控制器中           | `v2/core/validator.py` 纯函数 `validate_action(game_state, action)` 返回 `ValidationResult` | Parametrized 测试边界情况（小于最小加注、筹码不足等）                   |
| **10** | 边池计算零散难复用             | 搬迁并精简 `PotManager` → `v2/core/pot.py`，提供 `allocate_side_pots()`                        | 用“三人不同额全押”用例断言 3 个池金额与 eligible\_players            |
| **11** | GameState 与规则判断耦合     | `v2/core/state.py` 仅负责可变数据+快照 DTO，不含规则                                                 | Snapshot 比对：执行一次下注后快照金额正确且无对手手牌                     |
| **12** | 逻辑层缺统一入口              | 在 `v2/core/__init__.py` 暴露高层 API (`new_deck`, `evaluate`) 供外层调用                        | `tests/core/test_public_api.py` import API 并跑 smoke |
| **13** | 随机性不可控，测试不稳定          | 在 `state.py` 中注入 `rng: random.Random`，构造时可传固定种子                                        | 在任何需要洗牌的测试用 `Random(42)`，保证 deterministic           |
| **14** | 逻辑层缺 Google-Docstring | 为 **cards/evaluator/player/validator/pot/state** 全面补注释                                 | `pydocstyle` 保持 0 error                             |
| **15** | 文档脱节                  | 运行 `pdoc v2.core -o docs/v2` 自动更新                                                      | CI job: `git diff --exit-code docs/v2` 应为空          |
| **16** | TASK\_GUIDE 未标记       | 在 **TASK\_GUIDE** 新增行：7-16 完成，状态✅                                                      | YAML lint                                           |
| **17** | 无用调试文件残留              | `scripts/cleanup.py` 自动删除 `*.log, *.tmp`                                               | 测试：运行脚本后目标目录无 `.log`                                |
| **18** | 10 手牌日志验证未实现          | 编写 `tests/system/test_play_10_hands.py` 调用 CLI 驱动 v2 控制器自动对局 10 手并保存日志，断言筹码守恒、阶段顺序     | 见 CLI 适配计划                                          |

---

### **阶段 C 控制器层重构（PLAN #19 – #25）**

| #      | ① 问题              | ② 解决方案                                                                                                                                                         | ③ 测试                                |
| ------ | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------- |
| **19** | v1 控制器逻辑重叠        | 新 `v2/controller/poker_controller.py`：<br>· 注入 GameState, AIStrategy, Logger<br>· 提供原子 API: `start_new_hand`, `execute_action`, `get_snapshot`, `is_hand_over` | 单元：模拟两人跟注 → 扑克牌正确翻转到 FLOP           |
| **20** | AI 策略耦合           | `v2/ai/base.py` 定义接口 `decide(game_snapshot)`； `simple_ai.py` 实现原 v1 逻辑                                                                                         | 用假策略始终 FOLD → 测试牌局自动结束并退筹           |
| **21** | 事务原子性无断言          | 在控制器 `@atomic` 装饰器实现 Copy-on-Write 回滚                                                                                                                          | 测试：在 mock 下注过程中抛异常 -> GameState 未改变 |
| **22** | 事件系统散乱            | 实现事件总线 `v2/core/events.py` + `EventBus`；控制器抛事件，UI 订阅                                                                                                           | 单元：注册监听器、触发事件、listener 被调用次数 = 期望   |
| **23** | CLI 依赖旧控制器        | 在 `ui/cli/cli_game.py` 复制到 v2/ui/cli/ 并改用新控制器 API；删除所有 direct GameState 访问                                                                                     | smoke 测试：运行 1 手人工 CLI，不崩溃           |
| **24** | Snapshot 数据格式尚未冻结 | 创建 `v2/controller/dto.py` 定义 Pydantic-dataclass Snapshot、ActionInput、ActionResult                                                                              | 契约测试：序列化→反序列化保持一致                   |
| **25** | 重要节点未跑 10 手验证     | 在 `tests/system/test_play_10_hands.py` 调用 CLI “自动模式”10 手：<br>· 通过控制器注入 `AutoUserStrategy`<br>· 日志输出到 temp 文件<br>· 断言筹码总和保持 + 底池总和 = 初始总和                       | 若失败 CI 标红                           |

---

### **阶段 D CLI 适配 & 回归（PLAN #26 – #28）**

| #      | ① 问题               | ② 解决方案                                      | ③ 测试                                        |
| ------ | ------------------ | ------------------------------------------- | ------------------------------------------- |
| **26** | CLI 显示逻辑与核心耦合      | 抽离显示函数到 `ui/cli/render.py`；所有显示仅使用 Snapshot | 单元：Snapshot → 渲染字符串包含公共牌数量正确                |
| **27** | 用户输入无效校验缺陷         | 用 `click` 库改写输入层，增加强校验；输入转 `ActionInput`    | monkeypatch `click.prompt`→ 注入无效输入 → 确认重试提示 |
| **28** | CLI 代码未加 docstring | 完成 docstring；运行 `pdoc v2/ui/cli` 更新 docs    | lint 检测通过                                   |

---

### **阶段 E Streamlit MVP 实现（PLAN #29 – #37）**

| #      | ① 问题                   | ② 解决方案                                                                     | ③ 测试                                          |
| ------ | ---------------------- | -------------------------------------------------------------------------- | --------------------------------------------- |
| **29** | 无图形界面                  | 创建 `v2/ui/streamlit/app.py` 基本结构，session\_state 保存控制器                      | smoke：`streamlit run app.py` 打开可加载            |
| **30** | 状态刷新机制生卡顿              | 封装 `render_state(snapshot)` 用 Streamlit columns / st.expander              | 手工点击，每步 snapshot 公共牌随阶段变更                     |
| **31** | 用户行动输入交互缺失             | 对 `ActionType` 映射按钮；加注按钮弹 `number_input`                                   | 测试：模拟 click → `controller.execute_action` 被调用 |
| **32** | AI 连续行动阻塞 UI           | 在回调函数中循环 AI 行动后 `st.rerun()`；或用 `asyncio`                                  | 断言每点一次按钮最多等待 < 1 s                            |
| **33** | 公共牌缺视觉元素               | 用 Unicode ♦♣♥♠+数字；后续可替换图片                                                  | 手动检查符号正确呈现                                    |
| **34** | 10 手回归检测 Streamlit 未覆盖 | 提供隐藏`debug_auto_play`按钮：自动跑 10 手后 alert 汇总                                 | 断言筹码守恒                                        |
| **35** | 再开新手牌流程丢状态             | `Next Hand`按钮调用 `controller.start_new_hand` 并 `st.session_state.events=[]` | 手动：连打 3 手无异常                                  |
| **36** | 事件日志未展示                | 侧边栏 `st.sidebar` 滚动显示 `EventBus` 收到的日志                                     | 日志行数随事件递增                                     |
| **37** | 文档 & guide             | 运行 `pdoc v2/ui/streamlit -o docs/v2`; 更新 TASK\_GUIDE, Readme               | CI diff docs must be empty                    |

---

### **阶段 F 测试体系与 CI 调整（PLAN #38 – #45）**

| #      | ① 问题              | ② 解决方案                                                                                    | ③ 测试                     |
| ------ | ----------------- | ----------------------------------------------------------------------------------------- | ------------------------ |
| **38** | 旧 tests 路径不匹配     | 重命名旧套件 → `tests_v1/`；v2 专用 tests 保持 `/tests/`                                             | CI 仅收集 `/tests/`         |
| **39** | 反作弊测试缺失           | 增加 `tests/anti_cheat/test_no_shortcut.py`：扫描测试源码， forbid `from v2.core import _private` 等 | 断言通过 AST 无作弊调用           |
| **40** | 覆盖率未知             | 配置 `pytest-cov`; 阈值 85%                                                                   | CI fail if coverage < 85 |
| **41** | 功能回归跨层测试          | 编写 `tests/integration/test_full_hand.py`：完整流程多边池场景                                        | 全断言                      |
| **42** | 负载/性能未知           | `tests/perf/test_evaluator_benchmark.py` 跑 100 万评估 < 阈值 2 s                               | fail if 超时               |
| **43** | 文档同步难             | CI 阶段运行 `pdoc` 与 `git diff --exit-code` 保证 docs up-to-date                                | 若失败提醒补文档                 |
| **44** | 临时文件残留            | 在 CI 最末执行 `scripts/cleanup.py --check` 报告无残留                                              | fail if 残留               |
| **45** | TASK\_GUIDE 未自动校验 | YAML schema 校验 TASK\_GUIDE，确保每条状态 ✅ / 🚧 / ❌                                              | fail if 不符合              |

---

### **阶段 G 收尾与维护（PLAN #46 – #50）**

| #      | ① 问题          | ② 解决方案                                                               | ③ 测试                                                 |
| ------ | ------------- | -------------------------------------------------------------------- | ---------------------------------------------------- |
| **46** | README 未反映 v2 | 更新顶层 `README.md`：介绍 v2、运行 CLI / Streamlit 步骤                         | CI grep README 包含 “v2”                               |
| **47** | 旧 CLI 用户迁移指引  | 在 `docs/v2/migrate_from_v1.md` 说明迁移脚本                                | 无代码测试                                                |
| **48** | 发布前缺验收        | 本地运行 `make acceptance`：调用 CLI + Streamlit 烟测、跑全部 pytest              | 脚本退出码 0                                              |
| **49** | 任务追踪可读性       | 优化 TASK\_GUIDE 格式：按阶段分组、彩色标签                                         | YAML lint                                            |
| **50** | 版本标识          | 在 `v2/__init__.py` 设置 `__version__ = "0.2.0-alpha"`；在 CI tag nightly | 单元：import v2; assert v2.**version** == “0.2.0-alpha” |

---

## 使用说明

1. **优先顺序**：按编号依次实施，若任务衍生新问题，在下一次对话追加 PLAN #51+。
2. **完成节点**：执行完每个重大阶段（A–G）后，务必：

   * 手动试玩 CLI 10 手、Streamlit 3 手，核对日志与规则。
   * 运行全量 `pytest` + `make doc` + `make cleanup`。
   * 更新 `TASK_GUIDE.txt`、`README.md`、`/docs`。
3. **沟通**：如遇设计权衡或测试不通过，请即时反馈，我们在下一轮对话增补或调整 PLAN。

以上 50 条 PLAN 覆盖了 v2 目录重构到 Streamlit 简易 MVP 的完整落地路径，并且嵌入文档、测试、清理与回归验证要求，确保过程严谨可控，成果可演示且稳定。
