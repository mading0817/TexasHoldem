{
  "timestamp": "2025-06-02T13:51:36.608236",
  "total_rules": 29,
  "covered_rules": 27,
  "partial_rules": 0,
  "uncovered_rules": 2,
  "coverage_percentage": 93.10344827586206,
  "category_coverage": {
    "basic_flow": {
      "total": 4,
      "covered": 4,
      "partial": 0,
      "uncovered": 0,
      "percentage": 100.0
    },
    "betting_rules": {
      "total": 6,
      "covered": 6,
      "partial": 0,
      "uncovered": 0,
      "percentage": 100.0
    },
    "hand_rankings": {
      "total": 10,
      "covered": 10,
      "partial": 0,
      "uncovered": 0,
      "percentage": 100.0
    },
    "side_pot": {
      "total": 3,
      "covered": 2,
      "partial": 0,
      "uncovered": 1,
      "percentage": 66.66666666666666
    },
    "showdown": {
      "total": 3,
      "covered": 3,
      "partial": 0,
      "uncovered": 0,
      "percentage": 100.0
    },
    "special_cases": {
      "total": 3,
      "covered": 2,
      "partial": 0,
      "uncovered": 1,
      "percentage": 66.66666666666666
    }
  },
  "priority_coverage": {
    "HIGH": {
      "total": 13,
      "covered": 13,
      "partial": 0,
      "uncovered": 0,
      "percentage": 100.0
    },
    "MEDIUM": {
      "total": 15,
      "covered": 14,
      "partial": 0,
      "uncovered": 1,
      "percentage": 93.33333333333333
    },
    "LOW": {
      "total": 1,
      "covered": 0,
      "partial": 0,
      "uncovered": 1,
      "percentage": 0.0
    }
  },
  "detailed_scenarios": [
    {
      "rule_id": "BF001",
      "category": "basic_flow",
      "description": "庄家按钮顺时针移动",
      "requirements": [
        "每手牌开始前庄家按钮顺时针移动一位"
      ],
      "test_patterns": [
        "dealer",
        "button",
        "rotate",
        "clockwise"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::dealer",
        "test_streamlit_app.py::dealer",
        "test_v2_ai.py::dealer",
        "test_v2_controller_events.py::dealer",
        "test_v2_dto.py::dealer",
        "test_v2_health_checker.py::dealer",
        "test_v2_player.py::dealer",
        "test_v2_snapshot_export_import.py::dealer",
        "test_v2_state.py::dealer"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BF002",
      "category": "basic_flow",
      "description": "盲注设置和位置",
      "requirements": [
        "小盲注为大盲注的一半",
        "盲注位置正确"
      ],
      "test_patterns": [
        "blind",
        "small_blind",
        "big_blind"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::blind",
        "test_streamlit_app.py::blind",
        "test_v2_ai.py::blind",
        "test_v2_cli_input_handler.py::blind",
        "test_v2_controller_events.py::blind",
        "test_v2_dto.py::blind",
        "test_v2_health_checker.py::blind",
        "test_v2_player.py::blind",
        "test_v2_snapshot_export_import.py::blind",
        "test_v2_state.py::blind",
        "test_v2_validator.py::blind"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BF003",
      "category": "basic_flow",
      "description": "发牌阶段顺序",
      "requirements": [
        "底牌→翻牌→转牌→河牌的正确顺序"
      ],
      "test_patterns": [
        "hole_cards",
        "flop",
        "turn",
        "river",
        "stage"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_enhanced_detector.py::turn",
        "test_integrity_guard.py::turn",
        "test_streamlit_app.py::hole_cards",
        "test_v2_ai.py::flop",
        "test_v2_cli.py::turn",
        "test_v2_cli_input_handler.py::flop",
        "test_v2_cli_render.py::hole_cards",
        "test_v2_controller.py::flop",
        "test_v2_controller_atomic.py::turn",
        "test_v2_core_public_api.py::hole_cards",
        "test_v2_deterministic_random.py::hole_cards",
        "test_v2_dto.py::hole_cards",
        "test_v2_enums.py::flop",
        "test_v2_evaluator.py::hole_cards",
        "test_v2_health_checker.py::hole_cards",
        "test_v2_player.py::hole_cards",
        "test_v2_pot.py::turn",
        "test_v2_snapshot_export_import.py::hole_cards",
        "test_v2_state.py::hole_cards",
        "test_v2_streamlit_debug_features.py::turn",
        "test_v2_streamlit_log_visualization.py::turn",
        "test_v2_validator.py::turn"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BF004",
      "category": "basic_flow",
      "description": "下注轮次顺序",
      "requirements": [
        "翻牌前从大盲注左侧开始",
        "翻牌后从庄家左侧开始"
      ],
      "test_patterns": [
        "betting_order",
        "action_order",
        "position"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_root_cause_analyzer.py::position",
        "test_streamlit_app.py::position",
        "test_v2_ai.py::position",
        "test_v2_controller_events.py::position",
        "test_v2_dto.py::position",
        "test_v2_health_checker.py::position",
        "test_v2_player.py::position",
        "test_v2_snapshot_export_import.py::position",
        "test_v2_state.py::position"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR001",
      "category": "betting_rules",
      "description": "弃牌操作",
      "requirements": [
        "玩家可以弃牌退出当前手牌"
      ],
      "test_patterns": [
        "fold",
        "弃牌"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_enhanced_detector.py::fold",
        "test_poker_rules_coverage.py::fold",
        "test_v2_ai.py::fold",
        "test_v2_cli.py::fold",
        "test_v2_cli_input_handler.py::fold",
        "test_v2_cli_render.py::fold",
        "test_v2_controller.py::fold",
        "test_v2_controller_atomic.py::fold",
        "test_v2_controller_events.py::fold",
        "test_v2_core_public_api.py::fold",
        "test_v2_dto.py::fold",
        "test_v2_enums.py::fold",
        "test_v2_events.py::fold",
        "test_v2_health_checker.py::fold",
        "test_v2_player.py::fold",
        "test_v2_snapshot_export_import.py::弃牌",
        "test_v2_state.py::fold",
        "test_v2_validator.py::fold"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR002",
      "category": "betting_rules",
      "description": "看牌操作",
      "requirements": [
        "无人下注时可以看牌"
      ],
      "test_patterns": [
        "check",
        "看牌"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::check",
        "test_v2_ai.py::check",
        "test_v2_cli.py::check",
        "test_v2_cli_input_handler.py::check",
        "test_v2_controller_events.py::check",
        "test_v2_dto.py::check",
        "test_v2_enums.py::check",
        "test_v2_health_checker.py::check",
        "test_v2_validator.py::check"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR003",
      "category": "betting_rules",
      "description": "跟注操作",
      "requirements": [
        "匹配当前最高下注金额"
      ],
      "test_patterns": [
        "call",
        "跟注"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_enhanced_detector.py::call",
        "test_integrity_guard.py::call",
        "test_poker_rules_coverage.py::call",
        "test_root_cause_analyzer.py::call",
        "test_streamlit_app.py::call",
        "test_v2_ai.py::call",
        "test_v2_cli.py::call",
        "test_v2_cli_input_handler.py::call",
        "test_v2_cli_render.py::call",
        "test_v2_controller_events.py::call",
        "test_v2_dto.py::call",
        "test_v2_enums.py::call",
        "test_v2_events.py::call",
        "test_v2_player.py::call",
        "test_v2_snapshot_export_import.py::跟注",
        "test_v2_streamlit_debug_features.py::call",
        "test_v2_streamlit_log_visualization.py::call",
        "test_v2_streamlit_session_state.py::call",
        "test_v2_validator.py::call"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR004",
      "category": "betting_rules",
      "description": "加注操作",
      "requirements": [
        "在当前下注基础上增加下注金额"
      ],
      "test_patterns": [
        "raise",
        "加注",
        "bet"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::raise",
        "test_streamlit_app.py::bet",
        "test_v2_ai.py::raise",
        "test_v2_cards.py::raise",
        "test_v2_cli.py::bet",
        "test_v2_cli_input_handler.py::raise",
        "test_v2_cli_render.py::raise",
        "test_v2_controller.py::raise",
        "test_v2_controller_atomic.py::raise",
        "test_v2_controller_events.py::raise",
        "test_v2_core_public_api.py::bet",
        "test_v2_dto.py::raise",
        "test_v2_enums.py::raise",
        "test_v2_evaluator.py::raise",
        "test_v2_events.py::raise",
        "test_v2_health_checker.py::bet",
        "test_v2_player.py::raise",
        "test_v2_pot.py::raise",
        "test_v2_snapshot_export_import.py::raise",
        "test_v2_state.py::raise",
        "test_v2_streamlit_debug_features.py::raise",
        "test_v2_streamlit_log_visualization.py::raise",
        "test_v2_streamlit_session_state.py::raise",
        "test_v2_validator.py::raise"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR005",
      "category": "betting_rules",
      "description": "全押操作",
      "requirements": [
        "将所有筹码投入底池"
      ],
      "test_patterns": [
        "all_in",
        "全押",
        "allin"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::all_in",
        "test_v2_cli.py::all_in",
        "test_v2_cli_input_handler.py::all_in",
        "test_v2_cli_render.py::all_in",
        "test_v2_controller_events.py::all_in",
        "test_v2_enums.py::all_in",
        "test_v2_player.py::all_in",
        "test_v2_pot.py::all_in",
        "test_v2_state.py::all_in",
        "test_v2_validator.py::all_in"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "BR006",
      "category": "betting_rules",
      "description": "最低加注额限制",
      "requirements": [
        "加注金额不得低于前一次加注的金额"
      ],
      "test_patterns": [
        "minimum_raise",
        "raise_amount",
        "min_bet"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_v2_ai.py::raise_amount",
        "test_v2_cli_input_handler.py::raise_amount",
        "test_v2_snapshot_export_import.py::raise_amount",
        "test_v2_state.py::raise_amount",
        "test_v2_validator.py::raise_amount"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR001",
      "category": "hand_rankings",
      "description": "皇家同花顺",
      "requirements": [
        "同一花色的A、K、Q、J、10"
      ],
      "test_patterns": [
        "royal_flush",
        "皇家同花顺"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::royal_flush",
        "test_v2_core_public_api.py::royal_flush",
        "test_v2_enums.py::royal_flush",
        "test_v2_evaluator.py::royal_flush"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR002",
      "category": "hand_rankings",
      "description": "同花顺",
      "requirements": [
        "同一花色的连续五张牌"
      ],
      "test_patterns": [
        "straight_flush",
        "同花顺"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::straight_flush",
        "test_v2_core_public_api.py::straight_flush",
        "test_v2_dto.py::同花顺",
        "test_v2_enums.py::straight_flush",
        "test_v2_evaluator.py::straight_flush"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR003",
      "category": "hand_rankings",
      "description": "四条",
      "requirements": [
        "四张相同点数的牌"
      ],
      "test_patterns": [
        "four_of_a_kind",
        "四条",
        "quads"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::four_of_a_kind",
        "test_v2_core_public_api.py::four_of_a_kind",
        "test_v2_evaluator.py::four_of_a_kind"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR004",
      "category": "hand_rankings",
      "description": "葫芦",
      "requirements": [
        "三张相同点数的牌加一对"
      ],
      "test_patterns": [
        "full_house",
        "葫芦",
        "boat"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::full_house",
        "test_v2_core_public_api.py::full_house",
        "test_v2_evaluator.py::full_house"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR005",
      "category": "hand_rankings",
      "description": "同花",
      "requirements": [
        "五张同一花色的非连续牌"
      ],
      "test_patterns": [
        "flush",
        "同花"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::flush",
        "test_v2_cards.py::同花",
        "test_v2_cli_render.py::同花",
        "test_v2_core_public_api.py::flush",
        "test_v2_dto.py::同花",
        "test_v2_enums.py::flush",
        "test_v2_evaluator.py::flush",
        "test_v2_streamlit_log_visualization.py::flush"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR006",
      "category": "hand_rankings",
      "description": "顺子",
      "requirements": [
        "五张连续点数的非同花色牌"
      ],
      "test_patterns": [
        "straight",
        "顺子"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::straight",
        "test_v2_core_public_api.py::straight",
        "test_v2_enums.py::straight",
        "test_v2_evaluator.py::straight"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR007",
      "category": "hand_rankings",
      "description": "三条",
      "requirements": [
        "三张相同点数的牌"
      ],
      "test_patterns": [
        "three_of_a_kind",
        "三条",
        "trips",
        "set"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_enhanced_detector.py::set",
        "test_integrity_guard.py::set",
        "test_poker_rules_coverage.py::three_of_a_kind",
        "test_root_cause_analyzer.py::set",
        "test_v2_ai.py::set",
        "test_v2_cards.py::set",
        "test_v2_cli.py::set",
        "test_v2_controller_events.py::set",
        "test_v2_core_public_api.py::three_of_a_kind",
        "test_v2_deterministic_random.py::set",
        "test_v2_evaluator.py::three_of_a_kind",
        "test_v2_events.py::set",
        "test_v2_health_checker.py::set",
        "test_v2_player.py::set",
        "test_v2_pot.py::set",
        "test_v2_snapshot_export_import.py::set",
        "test_v2_state.py::set",
        "test_v2_streamlit_debug_features.py::set",
        "test_v2_streamlit_log_visualization.py::set",
        "test_v2_streamlit_session_state.py::set",
        "test_v2_validator.py::set"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR008",
      "category": "hand_rankings",
      "description": "两对",
      "requirements": [
        "两组不同点数的对子"
      ],
      "test_patterns": [
        "two_pair",
        "两对"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::two_pair",
        "test_v2_core_public_api.py::two_pair",
        "test_v2_enums.py::two_pair",
        "test_v2_evaluator.py::two_pair"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR009",
      "category": "hand_rankings",
      "description": "一对",
      "requirements": [
        "两张相同点数的牌"
      ],
      "test_patterns": [
        "one_pair",
        "一对",
        "pair"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::one_pair",
        "test_v2_cli_render.py::一对",
        "test_v2_controller.py::pair",
        "test_v2_core_public_api.py::one_pair",
        "test_v2_enums.py::one_pair",
        "test_v2_evaluator.py::one_pair"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "HR010",
      "category": "hand_rankings",
      "description": "高牌",
      "requirements": [
        "无法组成上述任何牌型的最高单张牌"
      ],
      "test_patterns": [
        "high_card",
        "高牌",
        "kicker"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::high_card",
        "test_v2_cli.py::高牌",
        "test_v2_core_public_api.py::high_card",
        "test_v2_enums.py::high_card",
        "test_v2_evaluator.py::high_card"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SP001",
      "category": "side_pot",
      "description": "边池创建",
      "requirements": [
        "全押玩家触发边池创建"
      ],
      "test_patterns": [
        "side_pot",
        "边池",
        "all_in"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_poker_rules_coverage.py::side_pot",
        "test_v2_cli.py::side_pot",
        "test_v2_cli_input_handler.py::all_in",
        "test_v2_cli_render.py::side_pot",
        "test_v2_controller.py::side_pot",
        "test_v2_controller_events.py::side_pot",
        "test_v2_core_public_api.py::side_pot",
        "test_v2_enums.py::all_in",
        "test_v2_player.py::all_in",
        "test_v2_pot.py::side_pot",
        "test_v2_state.py::all_in",
        "test_v2_validator.py::all_in"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SP002",
      "category": "side_pot",
      "description": "主池分配",
      "requirements": [
        "所有玩家按最小全押金额匹配"
      ],
      "test_patterns": [
        "main_pot",
        "主池"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_v2_pot.py::main_pot"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SP003",
      "category": "side_pot",
      "description": "多边池处理",
      "requirements": [
        "多个全押玩家的复杂边池分配"
      ],
      "test_patterns": [
        "multiple_side_pot",
        "多边池"
      ],
      "priority": "MEDIUM",
      "covered_by": [],
      "coverage_status": "not_covered"
    },
    {
      "rule_id": "SD001",
      "category": "showdown",
      "description": "摊牌顺序",
      "requirements": [
        "最后下注者首先亮牌，或从庄家左侧开始"
      ],
      "test_patterns": [
        "showdown",
        "摊牌",
        "reveal"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_poker_rules_coverage.py::showdown",
        "test_v2_enums.py::showdown",
        "test_v2_snapshot_export_import.py::showdown",
        "test_v2_state.py::showdown"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SD002",
      "category": "showdown",
      "description": "牌型比较",
      "requirements": [
        "正确比较牌型大小和踢脚牌"
      ],
      "test_patterns": [
        "hand_comparison",
        "牌型比较",
        "kicker"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_v2_evaluator.py::hand_comparison"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SD003",
      "category": "showdown",
      "description": "平分底池",
      "requirements": [
        "相同牌型时平分底池"
      ],
      "test_patterns": [
        "split_pot",
        "平分",
        "tie"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_v2_pot.py::平分"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SC001",
      "category": "special_cases",
      "description": "使用公共牌",
      "requirements": [
        "玩家可选择使用0-2张底牌与公共牌组合"
      ],
      "test_patterns": [
        "community_cards",
        "公共牌",
        "board"
      ],
      "priority": "MEDIUM",
      "covered_by": [
        "test_streamlit_app.py::community_cards",
        "test_v2_ai.py::community_cards",
        "test_v2_cli_render.py::community_cards",
        "test_v2_controller_events.py::community_cards",
        "test_v2_core_public_api.py::community_cards",
        "test_v2_deterministic_random.py::community_cards",
        "test_v2_dto.py::community_cards",
        "test_v2_evaluator.py::community_cards",
        "test_v2_health_checker.py::community_cards",
        "test_v2_snapshot_export_import.py::community_cards",
        "test_v2_state.py::community_cards"
      ],
      "coverage_status": "covered"
    },
    {
      "rule_id": "SC002",
      "category": "special_cases",
      "description": "打公牌",
      "requirements": [
        "最佳手牌仅由公共牌组成时平分底池"
      ],
      "test_patterns": [
        "play_board",
        "打公牌"
      ],
      "priority": "LOW",
      "covered_by": [],
      "coverage_status": "not_covered"
    },
    {
      "rule_id": "SC003",
      "category": "special_cases",
      "description": "筹码守恒",
      "requirements": [
        "游戏过程中筹码总数保持不变"
      ],
      "test_patterns": [
        "chip_conservation",
        "筹码守恒"
      ],
      "priority": "HIGH",
      "covered_by": [
        "test_streamlit_app.py::chip_conservation",
        "test_v2_health_checker.py::chip_conservation",
        "test_v2_streamlit_debug_features.py::chip_conservation"
      ],
      "coverage_status": "covered"
    }
  ]
}