🚨 增强版测试反作弊监督者报告
============================================================
扫描时间: 2025-06-02 13:31:17
发现违规: 67 个

📊 违规模式统计:
------------------------------
  api_boundary_violation: 3 个
  private_state_tampering: 43 个
  dangerous_operation: 21 个

🔴 高严重程度违规:
------------------------------
📍 api_boundary_violation
   文件: v2\tests\unit\test_streamlit_app.py
   位置: 第25行, 第0列
   描述: UI测试违规导入core模块: v2.core.state
   代码: from v2.core.state import GameState

📍 api_boundary_violation
   文件: v2\tests\unit\test_streamlit_app.py
   位置: 第26行, 第0列
   描述: UI测试违规导入core模块: v2.core.enums
   代码: from v2.core.enums import Phase, ActionType, SeatStatus

📍 api_boundary_violation
   文件: v2\tests\unit\test_streamlit_app.py
   位置: 第27行, 第0列
   描述: UI测试违规导入core模块: v2.core.cards
   代码: from v2.core.cards import Card, Suit, Rank

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_controller_atomic.py
   位置: 第143行, 第16列
   描述: 直接修改私有属性: _game_state
   代码: self._game_state = "not a GameState"

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_health_checker.py
   位置: 第52行, 第12列
   描述: 使用危险操作: setattr
   代码: setattr(snapshot, key, value)

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第21行, 第8列
   描述: 直接修改私有属性: _big_blind
   代码: self._big_blind = big_blind

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第23行, 第8列
   描述: 直接修改私有属性: _current_player_seat
   代码: self._current_player_seat = current_player_seat

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第220行, 第8列
   描述: 直接修改私有属性: _current_player_seat
   代码: self.game_state._current_player_seat = 2  # Different player's turn

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第236行, 第8列
   描述: 直接修改私有属性: _current_player_seat
   代码: self.game_state._current_player_seat = None

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第49行, 第0列
   描述: 间接篡改私有状态（字典访问）: __dict__\[.*_.*\]
   代码: game.__dict__['_game_state'] = "hacked"

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第50行, 第0列
   描述: 间接篡改私有状态（字典访问）: vars\(.*\)\[.*_.*\]
   代码: vars(game)['_players'] = []

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第51行, 第0列
   描述: 间接篡改私有状态（字典访问）: __dict__\[.*_.*\]
   代码: obj.__dict__['_private_attr'] = "value"

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第132行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, attr_name, "hacked")

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第135行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_" + "dynamic", "value")

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第136行, 第0列
   描述: 间接篡改私有状态（字典访问）: getattr\(.*,.*_.*\)
   代码: getattr(game, "_" + "attr")

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第156行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_game_state", "hacked")

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第157行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_players", [])

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第160行, 第0列
   描述: 函数调用篡改私有状态: delattr\(.*,.*_.*\)
   代码: delattr(game, "_deck")

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第163行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: if hasattr(game, "_private_data"):

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第189行, 第0列
   描述: 间接篡改私有状态（字典访问）: __dict__\[.*_.*\]
   代码: game.__dict__['_players'] = []

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第192行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_deck", [])

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第233行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_data", "value")  # 危险操作

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第265行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, attr_name, "value")

📍 dangerous_operation
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第319行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_data", "value")

📍 dangerous_operation
   文件: v2\tests\meta\test_integrity_guard.py
   位置: 第72行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_private_attr", "hacked")

📍 dangerous_operation
   文件: v2\tests\meta\test_integrity_guard.py
   位置: 第179行, 第0列
   描述: 函数调用篡改私有状态: setattr\(.*,.*_.*,.*\)
   代码: setattr(game, "_another_private", "value")

📍 dangerous_operation
   文件: v2\tests\unit\test_streamlit_app.py
   位置: 第46行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(mock_session_state, 'game_started')

📍 dangerous_operation
   文件: v2\tests\unit\test_streamlit_app.py
   位置: 第48行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(mock_session_state, 'debug_mode')

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_pot.py
   位置: 第337行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: assert self.pot_manager._total_collected == 0

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_streamlit_debug_features.py
   位置: 第32行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: mock_controller._logger = Mock()

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_streamlit_debug_features.py
   位置: 第57行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: mock_controller._logger = Mock()

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_streamlit_debug_features.py
   位置: 第102行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: mock_controller._logger = Mock()

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_streamlit_debug_features.py
   位置: 第165行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: mock_controller._logger = Mock()

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_log_visualization.py
   位置: 第41行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(mock_st.session_state, 'log_file_path')

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_session_state.py
   位置: 第123行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(controller, 'start_new_hand')

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_session_state.py
   位置: 第124行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(controller, 'execute_action')

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_session_state.py
   位置: 第125行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(controller, 'get_snapshot')

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_session_state.py
   位置: 第126行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(controller, 'is_hand_over')

📍 dangerous_operation
   文件: v2\tests\unit\test_v2_streamlit_session_state.py
   位置: 第127行, 第0列
   描述: 函数调用篡改私有状态: hasattr\(.*,.*_.*\)
   代码: assert hasattr(controller, 'get_current_player_id')

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第77行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第95行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第105行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 1500  # More than player's chips

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第126行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第152行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第153行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._last_raise_amount = 10

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第170行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第171行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._last_raise_amount = 20

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第179行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第180行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._last_raise_amount = 20

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第181行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._player_bets = {1: 0}  # Player hasn't bet yet

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第193行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 100

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第194行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._player_bets = {1: 0}

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第220行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_player_seat = 2  # Different player's turn

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第236行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_player_seat = None

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第249行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 100

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第250行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._player_bets = {1: 30}  # Player has already bet 30

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第267行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第279行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._current_bet = 50

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第280行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._last_raise_amount = 10

📍 private_state_tampering
   文件: v2\tests\unit\test_v2_validator.py
   位置: 第281行, 第0列
   描述: 测试帮凶：恶意工厂方法包含私有状态篡改
   代码: self.game_state._player_bets = {1: 0}


🟡 中等严重程度违规:
------------------------------
📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第72行, 第0列
   描述: 循环遍历篡改私有状态: for.*in.*__dict__
   代码: for attr in game.__dict__:

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第77行, 第0列
   描述: 循环遍历篡改私有状态: for.*in.*vars\(
   代码: for key in vars(game):

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第259行, 第0列
   描述: 循环遍历篡改私有状态: for.*in.*__dict__
   代码: for attr in game.__dict__:

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第43行, 第0列
   描述: 测试帮凶：提供私有状态访问的辅助方法
   代码: def test_dict_access_tampering_detection(self):

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第110行, 第0列
   描述: 测试帮凶：提供私有状态访问的辅助方法
   代码: def get_private_state(obj):

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第135行, 第0列
   描述: 动态篡改：字符串构造属性名
   代码: setattr(game, "_" + "dynamic", "value")

📍 private_state_tampering
   文件: v2\tests\meta\test_enhanced_detector.py
   位置: 第136行, 第0列
   描述: 动态篡改：字符串构造属性名
   代码: getattr(game, "_" + "attr")


💡 增强版修复建议:
------------------------------
1. 移除所有直接和间接修改私有状态的代码
2. 避免使用__dict__、vars()等访问私有属性
3. 不要在测试辅助方法中包含篡改逻辑
4. 避免动态构造私有属性名
5. 使用公共API和正当的测试模式
6. 如需特殊测试场景，请添加到白名单配置

📚 检测到的篡改模式说明:
------------------------------