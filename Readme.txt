# TexasHoldem Project

## 项目目标

开发以LLM AI为对手的单人单机德州扑克游戏。初期完成基于Python的网页端Demo，后续支持多平台扩展。

## 第一阶段 (MVP) 范围

实现一个可玩的单手牌命令行版本，包含基础的德州扑克游戏逻辑和与AI的交互。

核心功能：
- 完整的单手牌流程（发牌、翻牌前、翻牌、转牌、河牌下注轮、比牌、结算）。
- 支持多玩家（1个人类玩家 + 多个AI玩家）。
- 实现标准的边池计算规则 **（已实现并验证）**。
- 人类玩家通过命令行输入数字选择动作。
- AI玩家进行基础决策（MVP阶段不考虑复杂策略和性格）。

已实现的核心游戏逻辑组件包括：
- 发牌 (Deck)
- **状态机基础 (BasePhase)**
- **下注轮控制 (GameState)**
- **标准边池计算和分配 (PotManager)**
- **具体Phase子类 (PreFlop, Flop, Turn, River, Showdown)**
- **行动验证与智能转换 (ActionValidator)**
- **游戏控制器基础框架 (GameController)**
- 基础牌型评估 (待实现)

## 技术栈

- 后端 / 游戏逻辑: Python (FastAPI)
- 数据存储: SQLite (MVP阶段暂不涉及持久化，数据存内存)
- 前端: React + TypeScript (MVP阶段为命令行界面)
- AI集成: 通过适配器模式调用LLM API (如 Gemini, ChatGPT)

## 架构模式

基于MVC (Model-View-Controller) 模式：
- Model:
  - 核心游戏逻辑 (**Core Game Logic**, 包括 **GameState, ActionValidator, PotManager, Phases**等模块)
  - AI记忆 (AIMemory - 待实现)
- View: 用户界面 (初期为命令行UI - 待实现)
- Controller: 后端API (待实现), 协调游戏流程与AI交互 (GameController - **已实现基础框架**)

游戏逻辑采用**按GamePhase拆分的状态机模式**，每个阶段独立处理。

## 核心MVP设计决策

- **筹码单位**: 最小单位为 1，SB = 1，BB = 2。
- **游戏结束**: 所有筹码集中于一个玩家时游戏结束。筹码归零的玩家退出当前手牌。
- **玩家座位**: 人类玩家座位可配置，初期实现可能固定座位 0。
- **AI 类型**: 支持混合使用不同 LLM 模型（Gemini, ChatGPT, Random），通过适配器模式集成，MVP阶段不考虑AI性格。
- **LLM 接口**: JSON 格式输入/输出，无效动作抛出异常。
- **用户界面**: 极简命令行，玩家输入数字进行操作选择 (0-9)。
- **手牌显示**: 人类玩家显示自己手牌，其他玩家显示为 XX。
- **历史记录**: 记录历史动作序列 (MVP阶段AI暂不使用)。
- **当前下注 (current_bet)**: 表示玩家在本轮已投入的筹码总额。
- **技术简化**: MVP阶段不包含网络层、并发控制、持久化。
- **边池计算**: 实现了标准的边池计算和分配逻辑，**包括单人All-in多余筹码的返还机制**。
- **行动处理**: 实现了行动的验证和智能转换（例如不足筹码加注自动转为All-in），**并修复了Pre-flop阶段行动顺序的bug**。
- **游戏状态管理**: 实现了带有事务性上下文管理器和clone方法的GameState，保证状态一致性，**并修复了底池计算未实时更新的bug**。
- **异常处理**: 定义了PokerGameError、InvalidActionError等业务异常。

## 开发优先级 (MVP)

1.  基础数据结构 (Card, Deck, Player, GameState, SeatStatus, ActionEvent) - **已完成并充分测试**。
2.  核心游戏逻辑 (发牌、状态机、下注轮控制、标准边池计算、牌型评估基础框架) - **已实现基础框架，并通过初步测试，需要持续集成测试和验证**。
    - **下一步**: 实现**完整的牌型评估系统**。
3.  命令行界面实现 (状态显示, 数字输入处理) - 待完成。
4.  AI适配器模式实现 (LLM调用封装, JSON处理, 异常) - 待完成。
5.  整合与测试 (端到端单手牌流程, 边池边界测试) - **初步完成，需要持续进行**。
